import knobs.knob as knob

'''
########################################################################################################################
#                                                                                                                      #
########################################################################################################################
'''
class KnobBank():

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def __init__(self, config_file):
        
        self._knobs = {}
        self._id = config_file['id']

        for id, knobConfig in config_file['knobs'].items():
            self._knobs[id] = knob.Knob(int(id), knobConfig['name'])

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def __str__(self):

        toReturn = ''

        for knob in self._knobs.values():
            toReturn += (str(knob) + '\n')

        return toReturn

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def setKnob(self, id, val):
        if id not in self._knobs.keys():
            print (f'Invalid Knob Id: {id}')
            return

        self._knobs[id].setValue(val)

        print (self._knobs[id])

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def getId(self):
        return self._id

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def handleData(self, data):
        id  = data[2]
        val = data[3]
        self.setKnob(id, val)