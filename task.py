
import threading

from timeit import default_timer as timer
import time

'''
########################################################################################################################
#                                                                                                                      #
########################################################################################################################
'''
class Task(object):

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def __init__(self, hz, callback, start=False):
        self._hz = hz
        self._period = 1.0 / hz

        self._callback = callback

        self._thread = None

        self._shouldExit = False

        if start:
            start()

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def start(self):
        self._thread = threading.Thread(target=self.__doWork)
        self._thread.start()

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def exit(self):
        self._shouldExit = True

    '''
    ####################################################################################################################
    # DO NOT CALL FROM THREAD                                                                                          #
    ####################################################################################################################
    '''
    def release(self):
        self.exit()
        self._thread.join()

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def __doWork(self):

        while not self._shouldExit:
            start = timer()
            self._callback()
            elapsed_ms = timer() - start

            if (elapsed_ms < self._period):
                time.sleep(self._period - elapsed_ms)