import settings.setting as setting
import copy

'''
########################################################################################################################
#                                                                                                                      #
########################################################################################################################
'''
class MultiSetting(setting.Setting):
    
    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def __init__(self, config_data):
        super().__init__(config_data)

        self._data = {}
        
        for id, value in config_data['values'].items():
            try:
                self._data[int(id)] = value['val']
            except ValueError:
                self._data[int(id, 16)] = value['val']

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def getValue(self):
        return self._data[self._rawValue]

    '''
    ####################################################################################################################
    #                                                                                                                  #
    ####################################################################################################################
    '''
    def validateValue(self, value):
        return (value in self._data.keys())
